@page "/shifts"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize(Roles = "Admin,Employee")]
@inject HttpClient Http

<style>
    /* -------- Layout & Containers -------- */
    .week-container {
        display: flex;
        gap: 10px;
        overflow-x: auto;
        padding: 10px 0;
    }

    .day-column {
        min-width: 200px;
        flex-shrink: 0;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        background-color: #fff;
    }

    .day-column h4 {
        text-align: center;
        margin-bottom: 10px;
        font-size: 16px;
        font-weight: bold;
    }

    .shift-card {
        background-color: rgba(255, 255, 255, 0.6);
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(8px);
    }

    /* -------- Employees -------- */
    .employees-container {
        display: flex;
        flex-direction: column;
        gap: 10px;
        margin-top: 8px;
    }

    .employee-box {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: rgba(255, 255, 255, 0.4);
        border-radius: 8px;
        padding: 8px 12px;
        font-size: 16px;
        font-weight: 500;
        box-shadow: 1px 1px 5px rgba(0,0,0,0.1);
    }

    .role-box {
        background-color: #2e90ff;
        border-radius: 8px;
        padding: 4px 10px;
        font-weight: 500;
        font-size: 14px;
        color: #ffffff;
        white-space: nowrap;
        margin-left: 12px;
    }

    /* -------- Month navigation -------- */
    .month-navigation {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-bottom: 2rem;
    }

    .month-navigation button {
        background-color: #ffffff;
        color: #000000;
        border: none;
        font-size: 1.5rem;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    .month-text {
        font-size: 1rem;
        font-style: italic;
        margin: 0;
    }
</style>

<h2>Skift och Anst√§llda</h2>

<!-- üîÑ M√•nadsnavigering -->
<div class="month-navigation">
    <button @onclick="PreviousMonth">&lt;</button>
    <h3 class="month-text">@currentMonthName @currentYear</h3>
    <button @onclick="NextMonth">&gt;</button>
</div>

@if (filteredGroupedShifts.Count == 0)
{
    <p><em>Inga skift f√∂r denna m√•nad.</em></p>
}
else
{
    <div class="week-container">
        @foreach (var day in filteredGroupedShifts)
        {
            <div class="day-column">
                <h4>@day.Key.ToString("dddd", new System.Globalization.CultureInfo("sv-SE"))<br />@day.Key.ToShortDateString()</h4>

                @foreach (var shift in day.Value)
                {
                    <div class="shift-card" style="background-color:@GetShiftColor(shift.ShiftType);">
                        @if (shift.Employees.Count == 0)
                        {
                            <p><em>Inga anst√§llda.</em></p>
                        }
                        else
                        {
                            <div class="employees-container">
                                @foreach (var emp in shift.Employees)
                                {
                                    <div class="employee-box">
                                        <span>@emp.FullName ‚Äî (@shift.StartTime - @shift.EndTime)</span>
                                        <span class="role-box">@emp.Role</span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private List<ShiftWithEmployeesDto>? shifts;
    private Dictionary<DateTime, List<ShiftWithEmployeesDto>> groupedShifts = new();
    private Dictionary<DateTime, List<ShiftWithEmployeesDto>> filteredGroupedShifts = new();

    private int currentYear;
    private int currentMonth;

    private string currentMonthName => new System.Globalization.CultureInfo("sv-SE").DateTimeFormat.GetMonthName(currentMonth);

    protected override async Task OnInitializedAsync()
    {
        shifts = await Http.GetFromJsonAsync<List<ShiftWithEmployeesDto>>("api/shifts");

        if (shifts != null)
        {
            groupedShifts = shifts
                .GroupBy(s => s.ShiftDate.Date)
                .OrderBy(g => g.Key)
                .ToDictionary(
                    g => g.Key,
                    g => g
                        .GroupBy(s => new { s.StartTime, s.EndTime })
                        .Select(group => new ShiftWithEmployeesDto
                        {
                            ShiftDate = g.Key,
                            StartTime = group.Key.StartTime,
                            EndTime = group.Key.EndTime,
                            ShiftType = group.First().ShiftType,
                            Description = group.First().Description,
                            Employees = group
                                .SelectMany(s => s.Employees)
                                .GroupBy(e => e.EmployeeID)
                                .Select(eGrp => eGrp.First())
                                .ToList()
                        })
                        .OrderBy(s => TimeSpan.TryParse(s.StartTime, out var t) ? t : TimeSpan.Zero)
                        .ToList()
                );
        }

        var now = DateTime.Now;
        currentYear = now.Year;
        currentMonth = now.Month;

        FilterShiftsByMonth();
    }

    private void FilterShiftsByMonth()
    {
        filteredGroupedShifts = groupedShifts
            .Where(g => g.Key.Year == currentYear && g.Key.Month == currentMonth)
            .OrderBy(g => g.Key)
            .ToDictionary(g => g.Key, g => g.Value);
    }

    private void PreviousMonth()
    {
        if (currentMonth == 1)
        {
            currentMonth = 12;
            currentYear--;
        }
        else
        {
            currentMonth--;
        }
        FilterShiftsByMonth();
    }

    private void NextMonth()
    {
        if (currentMonth == 12)
        {
            currentMonth = 1;
            currentYear++;
        }
        else
        {
            currentMonth++;
        }
        FilterShiftsByMonth();
    }

    private string GetShiftColor(string shiftType)
    {
        return NormalizeShiftType(shiftType) switch
        {
            "dag" => "#f0faff",   // Ljusbl√•
            "kv√§ll" => "#FFF3CD", // Ljusgul
            "natt" => "#eaf0ff",  // Ljuslila/bl√•
            _ => "#F8F9FA"
        };
    }

    private string NormalizeShiftType(string shiftType) => shiftType?.Trim().ToLower() ?? "";

    public class ShiftWithEmployeesDto
    {
        public int ShiftID { get; set; }
        public DateTime ShiftDate { get; set; }
        public string StartTime { get; set; } = string.Empty;
        public string EndTime { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string ShiftType { get; set; } = string.Empty;
        public List<EmployeeCreateDto> Employees { get; set; } = new List<EmployeeCreateDto>();
    }

    public class EmployeeCreateDto
    {
        public int EmployeeID { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }
}
